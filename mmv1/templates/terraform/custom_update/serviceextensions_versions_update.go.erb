	// Modified copy of the update method automatically generated by Magic Modules (resourceServiceExtensionsWasmPluginUpdate)

	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for WasmPlugin: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	descriptionProp, err := expandServiceExtensionsWasmPluginDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	labelsProp, err := expandServiceExtensionsWasmPluginLabels(d.Get("labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	mainVersionIdProp, err := expandServiceExtensionsWasmPluginMainVersionId(d.Get("main_version_id"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("main_version_id"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, mainVersionIdProp)) {
		obj["mainVersionId"] = mainVersionIdProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ServiceExtensionsBasePath}}projects/{{project}}/locations/global/wasmPlugins/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating WasmPlugin %q: %#v", d.Id(), obj)
	updateMask := []string{}
	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}

	if d.HasChange("labels") {
		updateMask = append(updateMask, "labels")
	}

	if d.HasChange("main_version_id") {
		updateMask = append(updateMask, "mainVersionId")
	}

	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
	})

	if err != nil {
		return fmt.Errorf("Error updating WasmPlugin %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating WasmPlugin %q: %#v", d.Id(), res)
	}

	err = ServiceExtensionsOperationWaitTime(
		config, res, project, "Updating WasmPlugin", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return err
	}
	// End of modified copy of the update method automatically generated by Magic Modules (resourceServiceExtensionsWasmPluginUpdate)

	log.Printf("[DEBUG] KFKF custom-update %#v", d)
	log.Printf("[DEBUG] KFKF config %#v", config)

	return resourceServiceExtensionsWasmPluginRead(d, meta)
